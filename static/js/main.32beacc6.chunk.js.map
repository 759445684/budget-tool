{"version":3,"sources":["firebase.ts","App.tsx","serviceWorker.js","index.tsx","logo.svg"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","App","_useState","useState","complete","id","userId","title","_useState2","Object","slicedToArray","data","setData","useEffect","fetch","then","response","json","me1","collection","onSnapshot","snapshot","categories","docs","map","doc","objectSpread","console","log","react_default","a","createElement","className","src","logo","alt","href","target","rel","todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yQAWAA,gBATuB,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,wCAGJ,IAAMC,EAAmCR,cCyCjCS,MA3Cf,WAAe,IAAAC,EACWC,mBAAiB,CAAC,CAAEC,UAAU,EAAMC,GAAI,EAAGC,OAAQ,EAAGC,MAAM,WADvEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAP,EAAA,GACNS,EADMH,EAAA,GACAI,EADAJ,EAAA,GAkBb,OAhBAK,oBAAU,WAIR,OAHAC,MAAM,+CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIL,EAAQK,KACjB,cAEN,IACHJ,oBAAU,WACR,IAAMK,EAAMlB,EAAGmB,WAAW,cAAcC,WAAY,SAAAC,GAClD,IAAMC,EAAaD,EAASE,KAAKC,IAAI,SAACC,GAAD,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAA,CAAYJ,GAAIoB,EAAIpB,IAAOoB,EAAId,UACpEgB,QAAQC,IAAIN,KAEd,OAAO,WACLJ,MAED,IAEDW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iBAEOF,EAAAC,EAAAC,cAAA,0BAFP,wBAIAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,yBAMP3B,EAAKa,IAAI,SAAAe,GACR,OAAOV,EAAAC,EAAAC,cAAA,UAAKQ,EAAKhC,WCnCLiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.32beacc6.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDwdx5GorfnngkDZ_qJYjhAsl935gSWlFY\",\n    authDomain: \"budget-app-ada37.firebaseapp.com\",\n    databaseURL: \"https://budget-app-ada37.firebaseio.com\",\n    projectId: \"budget-app-ada37\",\n    storageBucket: \"budget-app-ada37.appspot.com\",\n    messagingSenderId: \"621799600219\",\n    appId: \"1:621799600219:web:e81a380c634e03ab\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const db: firebase.firestore.Firestore = firebase.firestore();\n\n\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { db } from './firebase';\ninterface Todo { \n  complete: boolean;\n  id: number;\n  userId: number;\n  title: string;\n}\nfunction App() {\n  const [data, setData] = useState<Todo[]>([{ complete: true, id: 1, userId: 1, title:'empty'}]);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos/')\n      .then(response => response.json())\n      .then(json => setData(json))\n    return () => {\n    };\n  }, []);\n  useEffect(() => {\n    const me1 = db.collection(\"categories\").onSnapshot((snapshot => {\n      const categories = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\n      console.log(categories);\n    }));\n    return () => {\n      me1()\n    };\n  }, [])\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n\n        </a>\n\n      </header>\n      {data.map(todo => {\n        return <h5>{todo.title}</h5>\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}